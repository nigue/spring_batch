<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:batch="http://www.springframework.org/schema/batch" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	">
 
    <import resource="classpath:spring/batchContext.xml" />
    <import resource="classpath:spring/databaseContext.xml" />
    <import resource="classpath:spring/propertiesContext.xml" />
 
    <bean id="report" 
          class="com.neoingen.cl.model.Report" 
          scope="prototype" />
    <bean id="itemProcessor" 
          class="com.neoingen.cl.processor.CustomItemProcessor" />
 
    <batch:job id="helloWorldJob">
        <batch:step id="step1">
            <batch:tasklet>
                <batch:chunk reader="multiResourceReader" 
                             writer="xmlItemWriter" 
                             processor="itemProcessor" 
                             commit-interval="10">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
 
    <bean id="multiResourceReader"
          class=" org.springframework.batch.item.file.MultiResourceItemReader">
        <property name="resources" value="file:${dataIn.path}*" />
        <property name="delegate" ref="lengthFileItemReader" />
    </bean>
 
    <bean id="lengthFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
 
        <!--<property name="resource" value="file:${user.home}${file.separator}.batch${file.separator}flat${file.separator}input${file.separator}data" />-->
 
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean id="fixedLengthLineTokenizer"
                          class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
                        <property name="names" value="ISIN,Quantity,Price,Customer" />
                        <property name="columns" value="1-12,13-15,16-20,21-30" />
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="com.neoingen.cl.field.ReportFieldSetMapper" />
 
                    <!-- if no data type conversion, use BeanWrapperFieldSetMapper to map by name
                   <bean
                           class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                           <property name="prototypeBeanName" value="report" />
                   </bean>
                    -->
                </property>
            </bean>
        </property>
 
    </bean>
    
<!--    <bean id="extractWriter" 
          class="org.springframework.batch.item.file.FlatFileItemWriter">
        <property name="resource" value="file:/home/anibal/.batch/flat/output/"/>
        <property name="lineAggregator">
             <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
            <property name="delimiter" value=","/>
            <property name="fieldExtractor">
                <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                    <property name="names" value="ISIN,Quantity,Price,Customer"/>
                </bean>
            </property>
        </bean>
        </property>
        <property name="transactional" value="true"/>

    </bean>-->
    <bean id="xmlItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
        <property name="resource" value="file:${user.home}${file.separator}.batch${file.separator}xml${file.separator}output${file.separator}report.xml" />
        <property name="marshaller" ref="reportMarshaller" />
        <property name="rootTagName" value="report" />
    </bean>
 
    <bean id="reportMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="classesToBeBound">
            <list>
                <value>com.neoingen.cl.model.Report</value>
            </list>
        </property>
    </bean>
 
</beans>